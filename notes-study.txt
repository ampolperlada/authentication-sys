1️⃣ Project Overview
🔹 Goal: Build an authentication system with:
✅ JWT Authentication (Login, Register, Protect Routes)
✅ Google OAuth Login (Login with Google)
✅ Role-Based Access Control (Admin/User roles)

🔹 Tech Stack:

Backend: Node.js, Express.js, PostgreSQL/MongoDB, JWT, OAuth (Google)
Frontend: React.js (Optional for testing, or use Postman)
Security: bcrypt.js (for password hashing), dotenv (for environment variables)

FOLDER STRUCTURE:
auth-system/
│── backend/        ✅ (Express.js + JWT + OAuth)
│   ├── config/         # Database & Auth Config
│   ├── controllers/    # Logic for Register, Login, Google OAuth
│   ├── middleware/     # Protect routes using JWT
│   ├── models/         # User Schema (MongoDB/PostgreSQL)
│   ├── routes/         # API routes for auth
│   ├── index.js        # Main server file
│── frontend/       ✅ (React.js for UI - Optional)
│   ├── components/     # Login, Register Forms
│   ├── App.js          # Connects frontend to backend

Backend: Set Up Node.js + Express.js ------------

🔹 Step 1: Initialize Project

mkdir auth-system && cd auth-system
mkdir backend && cd backend
npm init -y


🔹 Step 2: Install Required Packages
npm install express jsonwebtoken bcryptjs dotenv cors cookie-parser passport passport-google-oauth20 pg

✅ Package Explanation:
jsonwebtoken → For generating and verifying JWT tokens
bcryptjs → For hashing passwords
passport-google-oauth20 → For Google OAuth authentication
pg → PostgreSQL database support

 Set Up PostgreSQL (User Table) ------------

 🔹 Step 1: Create Database & Table

CREATE DATABASE authdb;

\c authdb

CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100) UNIQUE NOT NULL,
  password VARCHAR(255),
  google_id VARCHAR(255) UNIQUE,
  role VARCHAR(50) DEFAULT 'user'
);

 This table stores:

email/password for JWT authentication
google_id for OAuth authentication
role for role-based access


📌 5️⃣ Backend: JWT Authentication (Register/Login)
🔹 Step 1: Set Up User Model (models/user.js)
CODE: 
const pool = require("../config/db");
const bcrypt = require("bcryptjs");

const User = {
  findByEmail: async (email) => {
    const result = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
    return result.rows[0];
  },
  createUser: async (name, email, password) => {
    const hashedPassword = await bcrypt.hash(password, 10);
    const result = await pool.query(
      "INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING *",
      [name, email, hashedPassword]
    );
    return result.rows[0];
  }
};

module.exports = User;

🔹 Step 2: Register & Login (controllers/authController.js)
CODE:
const jwt = require("jsonwebtoken");
const User = require("../models/user");

exports.register = async (req, res) => {
  const { name, email, password } = req.body;
  const existingUser = await User.findByEmail(email);
  if (existingUser) return res.status(400).json({ message: "User already exists" });

  const newUser = await User.createUser(name, email, password);
  res.status(201).json({ message: "User registered successfully" });
};

exports.login = async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findByEmail(email);
  if (!user) return res.status(400).json({ message: "Invalid credentials" });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ message: "Invalid credentials" });

  const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET, { expiresIn: "1h" });
  res.json({ token });
};

