1️⃣ Project Overview
🔹 Goal: Build an authentication system with:
✅ JWT Authentication (Login, Register, Protect Routes)
✅ Google OAuth Login (Login with Google)
✅ Role-Based Access Control (Admin/User roles)

🔹 Tech Stack:

Backend: Node.js, Express.js, PostgreSQL/MongoDB, JWT, OAuth (Google)
Frontend: React.js (Optional for testing, or use Postman)
Security: bcrypt.js (for password hashing), dotenv (for environment variables)

auth-system/
│── backend/        ✅ (Express.js + JWT + OAuth)
│   ├── config/         # Database & Authentication Config
│   │   ├── db.js           # PostgreSQL connection
│   │   ├── passport.js     # Google OAuth setup
│   ├── controllers/    # Handles Register, Login, Google OAuth
│   │   ├── authController.js  # Login, Register, Token Generation
│   ├── middleware/     # Protect routes using JWT
│   │   ├── authMiddleware.js  # JWT Authentication Middleware
│   ├── models/         # Database models
│   │   ├── user.js         # User model (DB queries)
│   ├── routes/         # API routes for authentication
│   │   ├── auth.js         # Register/Login API Routes
│   │   ├── protected.js    # Secure API Routes (requires JWT)
│   ├── .env             # Stores database credentials & API secrets
│   ├── index.js         # Main Express.js server file
│   ├── package.json     # Dependencies & scripts
│── frontend/       ✅ (React.js for UI - Optional)
│   ├── src/
│   │   ├── components/      # Login, Register Forms
│   │   ├── pages/           # Dashboard, Profile, Auth Pages
│   │   ├── App.js           # Connects frontend to backend
│   ├── package.json      # Dependencies & scripts
│── README.md         # Documentation

📌 What Changed & Why? (STRUCTURE)
✅ Organized backend/ into meaningful folders:

config/ → Stores DB & authentication configurations
controllers/ → Handles authentication logic
middleware/ → Secures protected routes
models/ → Manages database queries
routes/ → Defines API endpoints
✅ Added a frontend/ folder (if you want a UI with React.js)

✅ Kept .env in backend/ to store credentials securely




Backend: Set Up Node.js + Express.js ------------

🔹 Step 1: Initialize Project

mkdir auth-system && cd auth-system
mkdir backend && cd backend
npm init -y


🔹 Step 2: Install Required Packages
npm install express jsonwebtoken bcryptjs dotenv cors cookie-parser passport passport-google-oauth20 pg

✅ Package Explanation:
jsonwebtoken → For generating and verifying JWT tokens
bcryptjs → For hashing passwords
passport-google-oauth20 → For Google OAuth authentication
pg → PostgreSQL database support

 Set Up PostgreSQL (User Table) ------------

 🔹 Step 1: Create Database & Table

CREATE DATABASE authdb;

\c authdb

CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100) UNIQUE NOT NULL,
  password VARCHAR(255),
  google_id VARCHAR(255) UNIQUE,
  role VARCHAR(50) DEFAULT 'user'
);

 This table stores:

email/password for JWT authentication
google_id for OAuth authentication
role for role-based access


📌 5️⃣ Backend: JWT Authentication (Register/Login)
🔹 Step 1: Set Up User Model (models/user.js)
CODE: 
const pool = require("../config/db");
const bcrypt = require("bcryptjs");

const User = {
  findByEmail: async (email) => {
    const result = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
    return result.rows[0];
  },
  createUser: async (name, email, password) => {
    const hashedPassword = await bcrypt.hash(password, 10);
    const result = await pool.query(
      "INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING *",
      [name, email, hashedPassword]
    );
    return result.rows[0];
  }
};

module.exports = User;

🔹 Step 2: Register & Login (controllers/authController.js)
CODE:
const jwt = require("jsonwebtoken");
const User = require("../models/user");

exports.register = async (req, res) => {
  const { name, email, password } = req.body;
  const existingUser = await User.findByEmail(email);
  if (existingUser) return res.status(400).json({ message: "User already exists" });

  const newUser = await User.createUser(name, email, password);
  res.status(201).json({ message: "User registered successfully" });
};

exports.login = async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findByEmail(email);
  if (!user) return res.status(400).json({ message: "Invalid credentials" });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ message: "Invalid credentials" });

  const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET, { expiresIn: "1h" });
  res.json({ token });
};

🔹 Step 3: Protect Routes Using JWT (middleware/authMiddleware.js)
const jwt = require("jsonwebtoken");

exports.protect = (req, res, next) => {
  const token = req.headers.authorization;
  if (!token) return res.status(401).json({ message: "Unauthorized" });

  try {
    const decoded = jwt.verify(token.split(" ")[1], process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).json({ message: "Invalid token" });
  }
};


📌 6️⃣ Add Google OAuth (Login with Google)
🔹 Step 1: Set Up Google OAuth (config/passport.js)

const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const User = require("../models/user");

passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  callbackURL: "/auth/google/callback"
}, async (accessToken, refreshToken, profile, done) => {
  let user = await User.findByEmail(profile.emails[0].value);
  if (!user) {
    user = await User.createUser(profile.displayName, profile.emails[0].value, null);
  }
  done(null, user);
}));

passport.serializeUser((user, done) => done(null, user.id));
passport.deserializeUser((id, done) => done(null, id));

🔹 Step 2: Google Login Route (routes/auth.js)
const express = require("express");
const passport = require("passport");
const router = express.Router();

router.get("/google", passport.authenticate("google", { scope: ["profile", "email"] }));
router.get("/google/callback", passport.authenticate("google", { failureRedirect: "/" }), (req, res) => {
  res.redirect("/dashboard");
});

module.exports = router;

Step 1: Create config/db.js (Database Connection File)
Inside backend/config/, create a new file called db.js and add this code:
const { Pool } = require("pg");
require("dotenv").config();

const pool = new Pool({
  user: process.env.DB_USER,      // PostgreSQL username
  host: process.env.DB_HOST,      // Usually 'localhost'
  database: process.env.DB_NAME,  // Database name
  password: process.env.DB_PASS,  // PostgreSQL password
  port: 5432                      // Default PostgreSQL port
});

module.exports = pool;


Step 2: Update models/user.js to Use db.js
If your models/user.js is missing or using the wrong database connection, update it:


const pool = require("../config/db");  // ✅ This connects to db.js
const bcrypt = require("bcryptjs");

const User = {
  findByEmail: async (email) => {
    const result = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
    return result.rows[0];
  },

  createUser: async (name, email, password) => {
    const hashedPassword = await bcrypt.hash(password, 10);
    const result = await pool.query(
      "INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING *",
      [name, email, hashedPassword]
    );
    return result.rows[0];
  }
};

module.exports = User;
✅ Now your user authentication system knows how to talk to PostgreSQL!


Step 3: Add Database Credentials in .env
Inside your backend/ folder, create or update your .env file:

DB_USER=your_db_user
DB_HOST=localhost
DB_NAME=authdb
DB_PASS=your_db_password
DB_PORT=5432
SESSION_SECRET=your_secret_key
JWT_SECRET=your_jwt_secret
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret
🔹 Replace your_db_user and your_db_password with your actual PostgreSQL credentials.


